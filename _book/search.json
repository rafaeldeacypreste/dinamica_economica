[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"","code":""},{"path":"index.html","id":"basic-functions","chapter":"1 About","heading":"1.1 Basic functions","text":"section, functions used throughout book.","code":""},{"path":"index.html","id":"colourizing-text","chapter":"1 About","heading":"1.1.1 Colourizing text","text":"function R Markdwon Cookbook colourize text:","code":"\ncolorize <- function(x, color) {\n  if (knitr::is_latex_output()) {\n    sprintf(\"\\\\textcolor{%s}{%s}\", color, x)\n  } else if (knitr::is_html_output()) {\n    sprintf(\"<span style='color: %s;'>%s<\/span>\", color,\n            x)\n  } else\n    x\n}"},{"path":"equações-diferenciais.html","id":"equações-diferenciais","chapter":"2 Equações diferenciais","heading":"2 Equações diferenciais","text":"","code":""},{"path":"equações-diferenciais.html","id":"introdução","chapter":"2 Equações diferenciais","heading":"2.1 Introdução","text":"O objetivo geral desta nota é realizar simulações numéricas de equações diferenciais ordinárias com ênfase, especialmente, em aplicações econômicas. Todas simulações são feitas utilizando-se o software R.1Para simulações, serão utilizados os pacotes abaixo, adicionais à base R. É preciso que sejam instalados (uma única vez) e carregados antes uso:Denota-se por equação diferencial ordinária (EDO) uma função desconhecida e relação com suas derivadas. Como, em economia, costuma-se usar o tempo como variável independente, esta notação permanecerá ao longo texto se não estiver disposto de outra maneira. Portanto, pode-se representar uma EDO de ordem \\(n\\) por\\[\\begin{equation}\n f[y(t),y^{(1)}(t),y^{(2)}(t),...,y^{(n)}(t),t ] = 0\n \\tag{2.1}\n\\end{equation}\\]em que \\((n)\\) é o grau da EDO e representa maior ordem das derivadas da função desconhecida Lucas Seco Mauro Patrão.2 Uma notação da forma geral pode ser descrita por:\\[\\begin{equation}\na_n(t)y^{(n)}(t)+\\dots+a_2(t)y^{(2)}(t)+a_1(t)y^{(1)}(t)+a_0(t)y(t) = g(t) \n\\tag{2.2}\n\\end{equation}\\]Neste texto, não serão abordados detalhes teóricos sobre equações diferenciais e sobre os modelos apresentados. O() leitor() deve recorrer aos documentos citados em caso de interesse.","code":"\n### install.packages(\"deSolve\")\n### install.packages(\"PhaseR\")\n### install.packages(\"scatterplot3d\")\n### install.packages(\"latex2exp\")\n\n\nlibrary(deSolve)       ### Funções para resolver EDOs\nlibrary(phaseR)        ### Funções para elaboração dos retratos de fase\nlibrary(scatterplot3d) ### Gráficos em 3 dimensões\nlibrary(latex2exp)     ### Expressões escritas padrão LaTeX\n\noptions(scipen = 99)   ### Utiliza 99 casas decimais como padrão em vez de notação científica"},{"path":"equações-diferenciais.html","id":"solow","chapter":"2 Equações diferenciais","heading":"2.1.1 EDOs de 1a ordem","text":"EDOs de 1a ordem envolvem uma equação em termos da sua primeira derivada \\(y'(t)\\). Conforme Giancarlo Gandolfo,3 pode-se encontrar uma solução de uma equação homogênea formato \\(y(t) = Ae^{-bt}\\), cuja estabilidade depende sinal de \\(-b\\). Alguns exemplos de equações na Figura 2.1.Apesar de servir de motivação para análise de EDOs, o objetivo desta nota não é resolver EDOs, encontrando uma função \\(y(t)\\) que satisfaz, mas sim identificar o comportamento de tais equações partir de resoluções numéricas e representações gráficas. Portanto, passa-se aos detalhes básicos para simulações.\nFigure 2.1: Elaboração própria.\n","code":""},{"path":"equações-diferenciais.html","id":"estrutura-básica-para-simulação-com-r","chapter":"2 Equações diferenciais","heading":"2.1.1.1 Estrutura básica para simulação com R","text":"Algumas equações diferenciais apresentam soluções analíticas, que podem ser resolvidas partir de técnicas específicas. Para economia, uma boa referência é o livro Gandolfo.4 Para aplicações mais detalhadas, consultar Seco Patrão.5 Nesses casos, simples técnicas de elaboração de gráficos podem ser adotadas R ou outro software.Porém, há situações que não se deseja ou não é simples encontrar uma solução analítica. Para esses casos, o R possui pacotes que ajudam encontrar e representar graficamente soluções numéricas e retratos de fase, que podem ajudar na interpretação dos modelos.O pacote utilizado para simulação e resolução de EDOs com o R é o deSolve. Um espectro maior de aplicações e parte das explicações aqui apresentadas podem ser encontradas em Karline Soetaert, Thomas Petzoldt, R. Woodrow Setzer.6 Recursos adicionais e manuais podem ser acessados digitando ?deSolve diretamente console7.Em primeiro lugar, deve-se definir uma função própria modelo ser simulado em linguagem própria R com, mínimo, os seguintes parâmetros nesta ordem:Tempo para simulação;Valor inicial das variáveis (estado); eParâmetros modelo.Quando da resolução, o modelo chamará essa função em cada período de tempo durante o processo de integração. Tempo e valores iniciais devem ser disponibilizados formato de vetores (ou listas). função ( )8 permite usar variáveis em formato de lista diretamente dentro da função sem que seja necessário indicar o nome da lista todas vezes. Por fim, função deve retornar uma lista (os resultados serão concatenados se estivermos interessados em mais de uma EDO). Os comandos estão detalhados abaixo.Com função elaborada, são estabelecidos os nomes e valores dos parâmetros, (s) condição(ões) inicial() e o período de tempo que se deseja fazer simulação. Lembre-se de que, quanto maior o tempo e complexidade modelo, maior será o nível de exigência computacional9.Como exemplo de EDO de 1a ordem, pode-se simular o seguinte modelo, baseado modelo canônico de Robert M. Solow1011 representado na equação (2.3).\n\\[\\begin{equation}\n  \\dot{r} = sF(r,1) - nr\n  \\tag{2.3}\n\\end{equation}\\] em que \\(r = \\frac{K}{L}\\) é razão capital-trabalho, \\(s\\) é taxa de poupança, \\(n\\) é taxa de crescimento da força de trabalho e \\(F(r,1)\\) é uma função de produção homogênea de grau um ser especificada.presente caso, uma função Cobb-Douglas na forma \\(F(K,L) = K^\\alpha L^{1-\\alpha} \\Rightarrow F(r,1) = r^\\alpha\\) pode ser adotada para resolução numérica. Portanto, equação diferencial ser simulada é:\n\\[\\begin{equation}\n  \\dot{r} = sr^\\alpha - nr\n  \\tag{2.4}\n\\end{equation}\\] cuja função para simuação da EDO pode ser construída por:partir da função solow_edo criada, pode-se disponibilizar os dados específicos partir da simulação com função ode( ). Os valores dos parâmetros foram \\(s = 0.1\\), \\(\\alpha = 0.35\\) e \\(n = 0.05\\) e o valor inicial \\(r_0 = 1\\). Ao final, estão os três primeiros e últimos resultados:O gráfico resultado modelo está descrito na Figura 2.2, sob o título “Modelo de Solow.”","code":"\n  ##### Função em R que representa a EDO\n  solow_edo <- function(tempo, inicial, parametros){  ### Parâmetros da função\n  \n  list <- as.list(c(inicial, parametros))           ### Lista c/ informações da EDO\n  \n  with(list, {                                      ### with() acessa elementos da lista\n    \n    dr = s*r^alpha - n*r                            ### EDO de interesse\n    \n    list(dr)                                        ### Retorna valores simulados\n  })                                                ### Fim do with\n}                                                   ### Fim da função\n  \n  ##### Valor inicial \nr <- c(r = 1)                     ### Formato de vetor nominado de acordo com a função\n\n  ##### Parâmetros da função (podem ser estimados)\n\nparametros <- c(s = 0.1,\n                alpha = 0.35,\n                n = 0.05)         ### Formato de vetor\n\n  ##### Sequência de tempo\ntempo <- seq(0, 350, by = 1)      \n\n  ##### Simulação do modelo  \nsolow <- ode(y = r,               ### Condição inicial\n             times = tempo,       ### Tempo a ser simulado\n             func = solow_edo,    ### Função criada\n             parms = parametros)  ### Se parâmetros já definidos, use parms = NULL\n\n  ##### Exibição dos resultados\nhead(solow, n=3)                  ### Exibe três primeiros\n#>      time        r\n#> [1,]    0 1.000000\n#> [2,]    1 1.049617\n#> [3,]    2 1.098443\ntail(solow, n=3)                  ### Exibe três últimos\n#>        time        r\n#> [349,]  348 2.904818\n#> [350,]  349 2.904819\n#> [351,]  350 2.904820"},{"path":"equações-diferenciais.html","id":"interrupção-automática-da-simulação","chapter":"2 Equações diferenciais","heading":"2.1.1.2 Interrupção automática da simulação","text":"Caso o interesse seja só fase inicial de uma equação ou se tenha uma EDO convergente, é possível usar funcionalidade root da função lsodar12.simulação será interrompida momento em que variáveis de estado estiverem uma distância entre si menor que um parâmetro pré-definido (exemplo, uma variação da ordem de 10-4). Assim, função raiz calcula, em primeiro lugar, taxa de variação e, depois, diferença entre soma dos valores absolutos e tolerância definida:Por fim, os gráficos estão na Figura 2.2. Note que função matplot()13 foi usada para ter uma interface melhor adaptada à plotagem lado lado e lidar com mais de uma variável mesmo gráfico. Nesta nota, serão dados exemplos também com função plot(), da base R.\nFigure 2.2: Elaboração própria.\n","code":"\n  ##### Critério de parada\nraiz <- function(tempo,incial,parametros) {\n  \n        variacao <- unlist(solow_edo(tempo,incial,parametros)) ### Desfaz lista\n        \n        sum(abs(variacao)) - 1e-4       ### Tolerância\n      }\n\n  ##### Nova simulação do modelo, acrescida da raiz\nsolow_raiz <- lsodar(y = r,\n                     times = tempo,\n                     func = solow_edo,\n                     parms = parametros,\n                     rootfun = raiz)    ### Indicação da função criada\n\ntail(solow_raiz, n=3)                   ### Compare com os três últimos sem parada\n#>            time        r\n#> [202,] 201.0000 2.901594\n#> [203,] 202.0000 2.901698\n#> [204,] 202.6914 2.901768\npar(mfrow=c(1,2))     ### Define gráficos a seguir em 1 linha e 2 colunas\n\n  ##### Série original\nmatplot(x = solow[,1],\n        y = solow[,2],\n        type = \"l\",               ### Gráfico de linha\n        lwd = 2,                  ### Largura da linha\n        col = \"red\",\n        main = \"Modelo de Solow\",\n        xlab = \"tempo\",\n        ylab = \"r(t)\")\n\n  ##### Série com interrupção\nmatplot(x = solow_raiz[,1], \n        y = solow_raiz[,2],\n        type = \"l\",\n        lwd = 2,\n        col = \"blue\",\n        main = \"Modelo de Solow com parada\",\n        xlab = \"tempo\",\n        ylab = \"r(t)\")"},{"path":"equações-diferenciais.html","id":"edo2","chapter":"2 Equações diferenciais","heading":"2.1.2 EDOs de 2a ordem","text":"EDOs de 2a ordem envolvem segunda derivada da função principal. Vale notar que, para fins computacionais, EDOs de 2a ordem precisam ser escritas sob forma de um sistema de equações de EDOs de 1a ordem14, bem como duas condições iniciais. Assim, uma EDO formato\n\\[\\begin{equation}\n\\begin{split}\n y'' & = f(y,y',t) \\\\\n y(t_0) & = y_{0}\\\\\n y'(t_0) & = y'_{0}\n\\end{split}\n \\tag{2.5}\n\\end{equation}\\] pode ser reescrita como\n\\[\\begin{equation}\n\\begin{split}\n y' & = y_1 \\\\\n y'' & = y'_{1} = f(y,y_1,t) \\\\\n y(t_0) & = y_{0}\\\\\n y_1(t_0) & = y'_{0}\n\\end{split}\n\\tag{2.6}\n\\end{equation}\\]título de exemplo, pode-se simular o modelo de acelerador de segunda ordem exposto em Gandolfo.15 EDO modelo é\n\\[\\begin{equation}\n  K'' + \\beta K'+ \\alpha \\beta K  = \\alpha \\beta K^*\n  \\tag{2.7}\n\\end{equation}\\] em que \\(K\\) é o estoque corrente de capital, \\(K^*\\) é o estoque desejado de capital, \\(\\beta\\) denota velocidade de ajuste investimento real ao investimento desejado. Por fim, \\(\\alpha\\) é velocidade de ajuste entre o estoque real e o desejado.É possível ampliar o sistema com \\(K^* = kY\\), em que \\(k\\) é relação capital-produto e \\(Y\\) é o produto da economia. Assim, equação (2.7) pode ser reescrita, após manipulações algébricas, como\n\\[\\begin{equation}\n  K'' + \\beta \\left(1-\\frac{\\alpha k}{1 - b}\\right) K'+ \\alpha \\beta K  = \\alpha \\beta k\\frac{}{1 - b}\n  \\tag{2.8}\n\\end{equation}\\] em que os termos \\(\\) e \\(b\\) se referem uma versão macroeconômica simples de uma função de consumo formato \\(C = + \\).versão em sistema de EDOs de 1a ordem da equação (2.8) pode ser feita considerando \\(= K'\\) o investimento e isolando derivadas lado esquerdo das equações:\n\\[\\begin{equation}\n\\begin{split}\n K' & = \\\\\n ' & =  -\\beta \\left(1-\\frac{\\alpha k}{1 - b}\\right) - \\alpha \\beta K + \\alpha \\beta k\\frac{}{1 - b}\\\\\n K(t_0) & = K_{0}\\\\\n K'(t_0) & = '(t_0) = I_{0}\n\\end{split}\n\\tag{2.9}\n\\end{equation}\\]Diante disso, segue-se passos semelhantes à resolução de EDOs de 1a ordem. Em primeiro lugar, cria-se função, agora com duas equações e duas saídas de dados.Em seguida, definem-se os parâmetros e o gráfico para representá-los na Figura 2.3.\nFigure 2.3: Elaboração própria.\nPor fim, note que EDOs de ordem superiores podem ser resolvidas adotando uma combinação dos procedimentos explicitados acima.","code":"\n  ##### EDO do Acelerador de 2a ordem\nacel_edo <-     function(tempo, inicial, parametros){\n      with(as.list(c(inicial, parametros)),{\n        \n        ### Equações apresentadas em (9)\n        dK <- I\n        dI <- -beta*(1-(alfa*k/(1-b)))*I - alfa*beta*K + alfa*beta*k*a/(1-b)\n        \n        list(c(dK,dI))   ### Retorna dois valores\n      })\n    }\n\ntempo <- seq(0,200, by = 0.5)\n\ninicial <- c(K = 1, I = 0)\n\nparametros <- c(alfa = 0.05,\n                beta = 0.25,\n                a = 2,\n                b = 0.8,\n                k = 3)\n\n  ##### Função semelhante à situação de 1a ordem\nacel <- ode(y = inicial,\n            times = tempo,\n            func = acel_edo,\n            parms = parametros)\n\n  ##### Gráfico da EDO\nplot(x = acel[,\"time\"],\n     y = acel[,\"K\"],\n     type = \"l\",\n     lwd = 2,\n     col = \"red\",\n     xlab = \"tempo\",\n     ylab = \"K(t)\",\n     main = TeX(\"Acelerador de 2^a ordem\")) ### Formato de texto LaTeX\n\nabline(h = 30,           ### Acrescenta linha tracejada para o equilíbrio\n       lty = \"dashed\")   "},{"path":"equações-diferenciais.html","id":"equação-com-coeficientes-constantes","chapter":"2 Equações diferenciais","heading":"2.1.2.1 Equação com coeficientes constantes","text":"Equações com coeficientes constantes apresentam apenas equação principal e suas derivadas variáveis tempo. Um exemplo é função \\(y''(t) + 2y'(t) + y(t) = 0\\). Sua versão em sistema de EDOs de 1a ordem pode ser feita considerando \\(y_1(t) = y(t)'\\), isolando derivadas lado esquerdo das equações e adotando uma das soluções canônicas, conforme :\n\\[\\begin{equation}\n\\begin{split}\n y' & = y_1 \\\\\n y_1' & =  -2y_1 - y\\\\\n y(0) & = 0\\\\\n y'(0) & = y_1 = 1\n\\end{split}\n\\tag{2.10}\n\\end{equation}\\]Diante disso, segue-se passos semelhantes à resolução de EDOs de 1a ordem. Em primeiro lugar, cria-se função, agora com duas equações e duas saídas de dados. O gráfico está representado na Figura 2.4.\nFigure 2.4: Coeficientes Constantes\n","code":"\n  #### EDO de equação de coeficientes constantes\nraizes_iguais <-  function(t, inicial, parametros){\n  with(as.list(c(inicial, parametros)),{\n    \n  #### Sistema de Equações representando EDO de 2a ordem\n    dy <- y1\n    dy1 <- -2*y1 - y\n    \n  #### Resultados devem ser concatenados em uma lista\n    list(c(dy,dy1))\n  })\n}\n\n  #### Tempo máximo reduzido, pois converge rapidamente\ntempo <- seq(1, 20, by = 0.1)\n\n\n  #### Condições iniciais canônicas\ninicial <- c(y = 0, y1 = 1)\n\n  #### EDO\nraizes_iguais_edo <- ode(y = inicial,\n                         times = tempo,\n                         func = raizes_iguais,\n                         parms = NULL)        ## Equação com parâmetros já definidos\n  #### Gráfico da EDO com coeficientes constantes\nplot(raizes_iguais_edo[,\"time\"], raizes_iguais_edo[,\"y\"],\n     type = \"l\",\n     lwd = 2,\n     col = \"red\",\n     xlab = \"t\",\n     ylab = \"y(t)\",\n     main = TeX(\"$y''(t) + 2y'(t) + y(t) = 0$\")) ## Formato de texto LaTeX"},{"path":"equações-diferenciais.html","id":"equação-de-laguerre","chapter":"2 Equações diferenciais","heading":"2.1.2.2 Equação de Laguerre","text":"equação de Laguerre tem aplicabilidade na Física quântica e em outras áreas da Matemática e Física. Exemplos de aplicações estão em . Um dos exemplos está na versão orbital s de um átomo de hidrogênio em seu menor nível de energia. equação de Laguerre, nesse caso, é dada por \\(xy''(x)+(1-x)y'(x) + y(x) = 0\\). Sua versão em sistema de EDOs de 1a ordem pode ser feita considerando \\(y_1(x) = y(x)'\\) e isolando derivadas lado esquerdo das equações e adotando uma das soluções canônicas:\n\\[\\begin{equation}\n\\begin{split}\n y' & = y_1 \\\\\n y_1' & =  \\frac{-(1-x)}{x}y_1 - \\frac{y}{x}\\\\\n y(x_0) & = 0\\\\\n y'(x_0) & = y_1 = 1\n\\end{split}\n\\tag{2.11}\n\\end{equation}\\]Diante disso, segue-se passos semelhantes à resolução de EDOs de 1a ordem. Em primeiro lugar, cria-se função, agora com duas equações e duas saídas de dados. O gráfico está representado na Figura 2.5.\nFigure 2.5: Equação de Laguerre\n","code":"\n  #### EDO de equação de Laguerre\nlaguerre <-  function(x, inicial, parametros){\n  with(as.list(c(inicial, parametros)),{\n    \n    ## Sistema de Equações representando EDO de 2a ordem\n    \n    dy <- y1\n    dy1 <- -(1-x)/x*y1 - y/x\n    \n    ## Resultados devem ser concatenados em uma lista\n    \n    list(c(dy,dy1))\n  })\n}\n\nx <- seq(1, 50, by = 0.1)\n\n\n  #### Condições iniciais canônicas\ninicial <- c(y = 0, y1 = 1)\n\n    \n  #### EDO\nlaguerre_edo <- ode(y = inicial,\n                     times = x,\n                     func = laguerre,\n                     parms = NULL)\n  #### Gráfico da EDO de Laguerre\nplot(laguerre_edo[,\"time\"], laguerre_edo[,\"y\"],\n     type = \"l\",\n     lwd = 2,\n     col = \"green\",\n     xlab = \"x\",\n     ylab = \"y(x)\",\n     main = TeX(\"$xy''(x) + (1-x)y'(x) + y(x) = 0$\")) ## Formato de texto LaTeX"},{"path":"equações-diferenciais.html","id":"equação-de-euler","chapter":"2 Equações diferenciais","heading":"2.1.2.3 Equação de Euler","text":"Um exemplo da chamada ``equação de Euler\" é dado pela função \\(t^2y''(t) + 2ty'(t) - 2y(t) = t^5\\), conforme . Sua versão em sistema de EDOs de 1a ordem pode ser feita considerando \\(y_1(t) = y(t)'\\) e isolando derivadas lado esquerdo das equações e adotando uma das soluções canônicas, conforme:\n\\[\\begin{equation}\n\\begin{split}\n y' & = y_1 \\\\\n y_1' & =  \\frac{-2y_1}{t} + \\frac{2y}{t^2} + t^3\\\\\n y(0) & = 1\\\\\n y'(0) & = y_1 = 0\n\\end{split}\n\\tag{2.12}\n\\end{equation}\\]Diante disso, segue-se passos semelhantes à resolução de EDOs de 1a ordem. Em primeiro lugar, cria-se função, agora com duas equações e duas saídas de dados. O gráfico está representado na Figura 2.6.\nFigure 2.6: Equação de Euler\n","code":"\n  #### EDO de equação de Euler\neuler <-  function(t, inicial, parametros){\n  with(as.list(c(inicial, parametros)),{\n    \n    ## Sistema de Equações representando EDO de 2a ordem\n    \n    dy <- y1\n    dy1 <- -2/t*y1 + 2*y/t**2 + t**3\n    \n    ## Resultados devem ser concatenados em uma lista\n    \n    list(c(dy,dy1))\n  })\n}\n\ntempo <- seq(1,10, by = 0.2)\n\n  #### Condições iniciais canônicas\ninicial <- c(y = 1, y1 = 0)\n\n  #### EDO\neuler_edo <- ode(y = inicial,\n                 times = tempo,\n                 func = euler,\n                 parms = NULL)\n  #### Gráfico da EDO com coeficientes constantes\nplot(euler_edo[,\"time\"],euler_edo[,\"y\"],\n     type = \"l\",\n     lwd = 2,\n     col = \"blue\",\n     xlab = \"t\",\n     ylab = \"y(t)\",\n     main = TeX(\"$t^2y''(t) + 2ty'(t) - 2y(t) = t^5$ \")) ## Formato de texto LaTeX"},{"path":"equações-diferenciais.html","id":"simultaneas","chapter":"2 Equações diferenciais","heading":"2.2 Equações diferenciais simultâneas","text":"O caso de um sistema com duas EDOs de 1a ordem pode ser resolvido de maneira semelhante ao modelo de 2a ordem apresentado na seção 2.1.2. Portanto, aqui será apresentada uma solução numérica para um sistema de três EDOs simultâneas trabalhado por Junhai Ma Hamza . Bangura.16 Trata-se de um sistema econômico e financeiro que combina taxa de juro, de investimento e de inflação. Os detalhes modelo devem ser avaliados artigo original.O sistema fincaneiro (caótico) representado modelo é tal que:\n\\[\\begin{equation}\n\\begin{split}\n \\dot{x} & = z + (y - )x \\\\\n \\dot{y} & = 1 - - x^2 \\\\\n \\dot{z} & = -x + cz\n\\end{split}\n\\tag{2.13}\n\\end{equation}\\] em que \\(x\\) expressa taxa de juro, \\(y\\) representa demanda por investimento e \\(z\\), o índice de preços. Ademais, \\(\\geq 0\\) é o volume de poupança, \\(b \\geq 0\\) é o custo unitário investimento e \\(c \\geq 0\\) é elasticidade da demanda por bens.Para simulação numérica, usam-se os seguintes valores iniciais e parâmetros sugeridos pelos autores: \\(x_0 = 0.03\\), \\(y_0 = 0.15\\), \\(z_0 = 0.25\\), \\(= 5\\), \\(b = 0.15\\) e \\(c = 0\\). Com isso, função é formada por:O modelo pode com três variáveis ser simulado na Figura 2.7 por meio pacote scatterplot3d.\nFigure 2.7: Elaboração própria.\npartir da resolução de todo o sistema, pode-se avaliar apenas relação entre duas variáveis como na Figura 2.8:\nFigure 2.8: Elaboração própria.\nrelação entre inflação e juro está na Figura 2.9.\nFigure 2.9: Elaboração própria.\n","code":"\n\n  #### EDO do sistema financeiro caótico\nfinancial_edo <- function(tempo, inicial, parametros) {\n  with(as.list(c(inicial,parametros)),{\n    dx <- z+(y - a)*x\n    dy <- 1 - b*y - x^2\n    dz <- -x - c*z\n    \n    list(c(dx,dy,dz))\n  })\n}\ntempo <- seq(0,100,by = .01)\n\ninicial <- c(x = .03,\n             y = .15,\n             z = .25)\n\nparametros <- c(a = 5,\n                b = .15,\n                c = .8)\n\n  #### EDO    \nfinancial <-  ode(y = inicial,\n                  times = tempo,\n                  func = financial_edo,\n                  parms = parametros)\n\n  #### Gráfico 3D de todo o sistema\nscatterplot3d(financial[,-1],    ## Exclui a coluna tempo para que apenas \n              type = \"l\",        ## as variáveis sejam representadas\n              lwd = 3,\n              xlab = \"juro\",\n              ylab = \"investimento\",\n              zlab = \"preços\")\n\n  #### Relação entre juro e demanda por investimento\nplot(x = financial[,\"x\"],\n     y = financial[,\"y\"],\n     type = \"l\",\n     lwd = 3,\n     xlab = \"juro\",\n     ylab = \"investimento\")\n\n  ## Relação entre juro e preço\nmatplot(x = financial[,\"time\"],\n        y = financial[,c(\"x\",\"z\")],\n        type = \"l\",\n        lwd = 3,\n        xlab = \"tempo\",\n        ylab = \"\")           ## Exclui o título do eixo y\n\n  #### Legenda\nlegend(\"bottomleft\",         ## Local no gráfico\n       c(\"juro\", \"preços\"),  ## Conteúdo da Legenda\n       col = 1:2,            ## Cores preto (1) e vermelho (2)\n       lty = 1:2)            ## Linha contínua (1) e tracejada (2)"},{"path":"equações-diferenciais.html","id":"análise-de-estabilidade","chapter":"2 Equações diferenciais","heading":"2.3 Análise de estabilidade","text":"análise de estabilidade com o pacote phaseR apresenta, de maneira gráfica, um diagrama de fase de uma EDO ou sistema de EDOs de modo avaliar trajetórias iniciais distintas ou consequências de perturbações modelo dinâmico.Este pacote depende de uma função que represente EDO partir da estrutura deSolve, vista nas seções anteriores. Os nomes dos parâmetros até agora foram adotados para que ficassem mais intuitivos. Entretanto, para o retrato de fase, os nomes dos parâmetros que aparecem na função da EDO devem ser os mesmos aceitos pelo próprio pacote deSolve conforme:O tempo deve ser representado pela letra t;Os valores iniciais devem estar contidos num vetor y; eOs parâmetros, indicados em um vetor parameters.","code":""},{"path":"equações-diferenciais.html","id":"estabilidade-de-edo-de-1a-ordem","chapter":"2 Equações diferenciais","heading":"2.3.1 Estabilidade de EDO de 1a ordem","text":"Como primeiro exemplo, tem-se análise modelo de Solow, apresentado na seção 2.1.1. Reorganizando os nomes da função e dos parâmetros, os comandos são:Após os ajustes na nomenclatura, é possível acrescentar o campo de fluxos (ou de velocidades) com função flowField(). Ademais, pode-se simular algumas trajetórias com função trajectory() partir de pontos iniciais distintos conforme Figura 2.10. O gráfico base deve conter o ajuste “add = FALSE.” Caso contrário, será adicionado outro gráfico pré-existente, gerando problemas de configuração.\nFigure 2.10: Elaboração própria.\n","code":"\n  #### EDO com os nomes padrão dos parâmetros\nsolow_edo <- function(t,y,parameters){\n  with(as.list(c(y,parameters)),{\n    \n    r = y                ## Adaptação da notação do modelo\n    \n    dr = s*r^alpha - n*r\n    \n    list(dr)\n  })\n}\n\nt <- seq(0,300,1)\ny <- c(r = 1)\nparameters <- c(s= 0.1, alpha = 0.35, n=0.05)\n\n  #### Gráfico com o campo de fluxos\nflowField(solow_edo,                ## EDO\n          xlim   = c(0,300),        ## Limite para o eixo do tempo\n          ylim   = c(0,4.1),        ## Limite para a variável em análise\n          system = \"one.dim\",       ## Apenas uma variável contra o tempo\n          parameters = parameters,  ## Vetor numérico\n          add = FALSE,              ## Se TRUE, adiciona campo a um gráfico anterior\n          points = 15,              ## Densidade de setas (default = 21)\n          xlab = \"tempo\",\n          ylab = \"r(t)\",\n          main = \"Estabilidade do Modelo de Solow\")\n\n\n  #### Desenho das trajetórias a partir de  condições iniciais\ntrajectory(solow_edo,\n           y0     = c(0, 0.5, 1.5, 2.5, 3, 3.5, 4), ## diferentes pontos iniciais\n           tlim   = c(0, 300),\n           system = \"one.dim\",\n           parameters = parameters,\n           col = \"blue\")"},{"path":"equações-diferenciais.html","id":"retrato-de-fase","chapter":"2 Equações diferenciais","heading":"2.3.1.1 Retrato de fase","text":"Pode-se também fazer o retrado de fase como na Figura 2.11, em que variável em nível está representada eixo horizontal e sua derivada eixo vertical. Com isso, visualiza-se pontos de equilíbrio e suas estabilidades.\nFigure 2.11: Elaboração própria.\n","code":"\n\n  #### Retrato de fase\nphasePortrait(solow_edo,\n              ylim   = c(0, 4),        ## Limite da variável dependente\n              system = \"one.dim\",\n              parameters = parameters,\n              col = \"red\",\n              xlab = \"r(t)\",\n              ylab = TeX(\"\\\\dot{r}(t)\"),\n              main = \"Retrato de Fase do Modelo de Solow\")"},{"path":"equações-diferenciais.html","id":"estabilidade-de-sistema-de-duas-edos-de-1a-ordem---equilíbrio-dinâmico","chapter":"2 Equações diferenciais","heading":"2.3.2 Estabilidade de sistema de duas EDOs de 1a ordem - equilíbrio dinâmico","text":"Procedimentos semelhantes podem ser adotados para um sistema com duas equações. Para um exemplo de sistema homogêneo de EDOs cujo equilíbrio é estável, utiliza-se exemplo sugerido por Gandolfo17 capítulo 18 (exercício 3), cuja esturutra é:\n\\[\\begin{equation}\n\\begin{split}\n \\dot{x} & = -2x + 4y \\\\\n \\dot{y} & = -x + y\n\\end{split}\n\\tag{2.14}\n\\end{equation}\\]\nAlém das informações disponíveis para o caso de uma variável (dimensão) apresentado acima, é possível desenhar isolinhas nulas, que representam o formato geométrico onde derivada de uma função é zero. Elas podem ser elaboradas com função nullclines(). Note que, agora, os valores iniciais para trajetória devem ser oferecidos em formato de matriz, representando os pares ordenados. O resultado pode ser visto na Figura 2.12.\nFigure 2.12: Elaboração própria.\n","code":"\n\n    #### EDO do sistema\ngandolfo_edo_estavel <- function(t,y,parameters){\n  x <- y[1]      ## Valores iniciais em formato de vetor\n  y <- y[2]      ## e precisam ser renomeados\n  \n  dx <- -x-y\n  dy <- 5*x-3*y \n  \n  list(c(dx,dy))\n}\n\n  #### Gráfico com o campo de fluxos\nflowField(gandolfo_edo_estavel,\n          xlim   = c(-5,5),     ## Limite da primeira variável\n          ylim   = c(-5,5),     ## Limite da primeira variável\n          add = FALSE,\n          points = 15)\n\n  #### Isolhinhas nulas\nnullclines(gandolfo_edo_estavel, ## EDO\n           xlim   = c(-5,5),     ## Limites compatíveis com o campo de fluxos\n           ylim   = c(-5,5))\n\n  #### Matriz com as condições iniciais\ny0 <- matrix(c(0,3,         ## Pares ordenaos para y0\n               0,-3,\n               -5,0,\n               4,-1),\n             ncol = 2,\n             byrow = TRUE) ## Insere os dados numa matriz a partir das linhas\n\n  #### Desenho das trajetórias a partir de  condições iniciais\ntrajectory(gandolfo_edo_estavel,\n           y0   = y0,\n           tlim = c(-5, 5))\n  #### Matriz com as condições iniciais\ny0\n#>      [,1] [,2]\n#> [1,]    0    3\n#> [2,]    0   -3\n#> [3,]   -5    0\n#> [4,]    4   -1"},{"path":"equações-diferenciais.html","id":"estabilidade-de-sistema-de-duas-edos-de-1a-ordem---ponto-de-sela","chapter":"2 Equações diferenciais","heading":"2.3.3 Estabilidade de sistema de duas EDOs de 1a ordem - ponto de sela","text":"Para um exemplo de sistema de EDOs cujo equilíbrio é caracterizado por uma trajetória de sela, pode-se adotar o sistema homogêneo sugerido por Gandolfo18 capítulo 18 ( exercício 1) cuja esturutra é:\n\\[\\begin{equation}\n\\begin{split}\n \\dot{x} & = -2x + 4y \\\\\n \\dot{y} & = -x + y\n\\end{split}\n\\tag{2.15}\n\\end{equation}\\]\nÉ possível perceber que se trata de uma trajetória de sela, cujas trajetórias estáveis e instáveis podem ser elaboradas com função drawManifolds(). O resultado pode ser visto na Figura 2.13.\nFigure 2.13: Elaboração própria.\nEm linhas gerais, essas são informações mais comuns na análise de sistemas dinâmicos campo da Economia. Funções e tratamentos adicionais podem ser avaliados nos itens referenciados abaixo.","code":"\n\n  #### EDO\ngandolfo_edo <- function(t,y,parameters){\n  \n  x <- y[1]      ## Valores iniciais em formato de vetor\n  y <- y[2]      ## e precisam ser renomeados\n  \n  dx <- -2*x-4*y\n  dy <- -x+y \n  \n  list(c(dx,dy))\n}\n\n  #### Campo de fluxos\nflowField(gandolfo_edo,\n          xlim   = c(-5,5),\n          ylim   = c(-5,5),\n          add = FALSE,\n          points = 15)\n\n  #### Isolinhas\nnullclines(gandolfo_edo,\n           xlim   = c(-5,5),\n           ylim   = c(-5,5))\n\n  #### Trajetórias de sela (instável e estável)\ndrawManifolds(gandolfo_edo,\n              y0 = c(0, 0))\n\n  #### Matriz de choques iniciais\ny0 <- matrix(c(0,3,\n               0,-3,\n               -5,0,\n               4,-1),\n             ncol = 2,\n             byrow = TRUE)\n\n  #### Trajetórias de choques\ntrajectory(gandolfo_edo,\n           y0   = y0,\n           tlim = c(-5, 5))"},{"path":"econometria-em-r.html","id":"econometria-em-r","chapter":"3 Econometria em R","heading":"3 Econometria em R","text":"Em desenvolvimento.","code":""},{"path":"matrizes-insumo-produto.html","id":"matrizes-insumo-produto","chapter":"4 Matrizes Insumo-Produto","heading":"4 Matrizes Insumo-Produto","text":"Em desenvolvimento.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
